#+TITLE: pyrho's Emacs Conf
#+AUTHOR: pyrho
#+DATE: 2025
#+STARTUP: content indent
#+DESCRIPTION: Modified version of Yay-Evil distro by Ian Y.E. Pan, available at https://github.com/ianyepan/yay-evil-emacs/blob/master/config.org
#+PROPERTY: header-args :tangle yes

My emacs config, currently for Emacs 30.1

* Some helpers
#+BEGIN_SRC emacs-lisp
  (defun pyrho/get-1password-secret (secret-reference)
    "Retrieve a secret from 1Password using op CLI."
    (string-trim
     (shell-command-to-string
      (format "op read --no-newline %s" secret-reference))))
#+END_SRC
* General.el
Configure General.el first so that the ~:general~ keyword is available for later ~use-package~.
#+BEGIN_SRC emacs-lisp
  ;; Taken from https://magnus.therning.org/2023-07-09-general.el-and-two-ways-to-define-keybindings.html
  ;; and  https://github.com/tshu-w/.emacs.d/blob/master/lisp/core-keybinds.el
  (use-package general
    ;; :after (evil evil-easymotion)
    :after (evil)
    :config
    (general-evil-setup)
    (general-auto-unbind-keys)

    (general-define-key
     :states '(normal insert motion visual emacs)
     :keymaps 'override
     :prefix-map 'tyrant-map
     :prefix "SPC"
     :non-normal-prefix "M-SPC")
    (general-create-definer pyrho/tyrant-def :keymaps 'tyrant-map)
    (pyrho/tyrant-def "" nil)

    (general-create-definer pyrho/despot-def
      :states '(normal insert motion visual emacs)
      :keymaps 'override
      :major-modes t
      :prefix ","
      :non-normal-prefix "M-,")
    (pyrho/despot-def "" nil)

    (general-def universal-argument-map
      "SPC u" 'universal-argument-more)

    (pyrho/tyrant-def
        "SPC"     '("M-x" . execute-extended-command)
        "TAB"     '("last buffer" . alternate-buffer)
        "!"       '("shell cmd" . shell-command)

        "a"       (cons "applications" (make-sparse-keymap))
        "ac"      'calc-dispatch
        "ap"      'list-processes
        "aP"      'proced

        "b"       (cons "buffers" (make-sparse-keymap))
        "bb"      'consult-buffer
        "bB"      'ibuffer
        "bd"      'kill-current-buffer
        "bm"      'switch-to-messages-buffer
        "bs"      'switch-to-scratch-buffer
        "bu"      'reopen-killed-buffer
        "bx"      'kill-buffer-and-window

        "c"       (cons "code" (make-sparse-keymap))
        "cb"      'flymake-show-buffer-diagnostics
        "cn"      'next-error
        "cp"      'previous-error
        "c="      'indent-region-or-buffer

        "f"       (cons "files" (make-sparse-keymap))
        "fC"      '("copy-file" . write-file)
        "fD"      'delete-current-buffer-file
        "ff"      'consult-fd
        "fj"      'dirvish-dwim
        "fJ"      'dired-jump-other-window
        "fo"      'open-file-or-directory-in-external-app
        "fR"      'rename-current-buffer-file
        "fs"      'save-buffer
        "fv"      (cons "variables" (make-sparse-keymap))
        "fvd"     'add-dir-local-variable
        "fvf"     'add-file-local-variable
        "fvp"     'add-file-local-variable-prop-line

        "F"       (cons "frame" (make-sparse-keymap))
        "Fd"      'delete-frame
        "FD"      'delete-other-frames
        "Fn"      'make-frame
        "Fo"      'other-frame

        "h"       (cons "help" (make-sparse-keymap))
        "ha"      'apropos
        "hb"      'describe-bindings
        "hc"      'describe-char
        "hf"      'describe-function
        "hF"      'describe-face
        "hi"      'info-emacs-manual
        "hI"      'info-display-manual
        "hk"      'describe-key
        "hK"      'describe-keymap
        "hm"      'describe-mode
        "hM"      'woman
        "hp"      'describe-package
        "ht"      'describe-text-properties
        "hv"      'describe-variable

        "j"       (cons "jump" (make-sparse-keymap))
        "ji"      'consult-imenu
        "jg"      'avy-goto-char-2

        "l"       (cons "layouts" tab-prefix-map)
        "ld"      'tab-bar-close-tab
        "lD"      'tab-bar-close-other-tabs
        "lg"      'tab-bar-change-tab-group
        "lm"      'tab-bar-move-tab-to
        "lM"      'tab-bar-move-tab-to-group
        "ll"      'tab-bar-switch-to-tab
        "lR"      'tab-bar-rename-tab
        "lt"      'other-tab-prefix
        "lu"      'tab-bar-undo-close-tab
        "l1"      '("select tab 1..9" . tab-bar-select-tab)
        "l2"      'tab-bar-select-tab
        "l3"      'tab-bar-select-tab
        "l4"      'tab-bar-select-tab
        "l5"      'tab-bar-select-tab
        "l6"      'tab-bar-select-tab
        "l7"      'tab-bar-select-tab
        "l8"      'tab-bar-select-tab
        "l9"      'tab-bar-select-tab
        "l TAB"   'tab-bar-switch-to-last-tab

        ;;; Not sure what this' for
        "m"       (cons "major mode" (make-sparse-keymap))

        ;;; Org
        "o"       (cons "org" (make-sparse-keymap))
        "R"       'org-refile
        "c"       'org-capture
        "or"      (cons "roam" (make-sparse-keymap))
        "orf"     'org-roam-node-find
        "ori"     'org-roam-node-insert
        "orc"     'org-roam-capture
        "ort"     'org-roam-dailies-goto-today

        ;;; Project
        "p"       (cons "projects" project-prefix-map)
        "pt"      'project-open-in-tab

        ;;; Quit
        "q"       (cons "quit" (make-sparse-keymap))
        "qd"      'restart-emacs-debug-init
        "qn"      'restart-emacs-start-new-emacs
        "qr"      'restart-emacs
        "qR"      'restart-emacs-without-desktop
        "qf"      'delete-frame
        "qq"      'save-buffers-kill-terminal
        "qQ"      'save-buffers-kill-emacs


        "s"      (cons "search" (make-sparse-keymap))
        "ss"     'consult-ripgrep
        "sl"     'consult-line

        "T"       (cons "toggles" (make-sparse-keymap))
        "Ta"      'auto-fill-mode
        "Td"      'toggle-debug-on-error
        "Tf"      'display-fill-column-indicator-mode
        "Ti"      'org-link-preview ; Toggle inline images on/off
        "Tl"      'toggle-truncate-lines
        "Tm"      'flymake-mode
        "Tn"      'display-line-numbers-mode
        "Ts"      'flyspell-mode
        "Tv"      'visual-mode ; Display hidden characeters
        "Tw"      'whitespace-mode
        "TW"      'toggle-word-wrap

        "u"       '("universal arg" . universal-argument)

        "w"       (cons "windows" (make-sparse-keymap))
        "w TAB"   'alternate-window
        "w+"      'window-layout-toggle
        "wb"      'switch-to-minibuffer-window
        "wd"      'delete-window
        "wD"      'delete-other-windows
        "wm"      'toggle-maximize-buffer
        "wf"      'follow-mode
        "wh"      'evil-window-left
        "wH"      'evil-window-move-far-left
        "wj"      'evil-window-down
        "wJ"      'evil-window-move-very-bottom
        "wk"      'evil-window-up
        "wK"      'evil-window-move-very-top
        "wl"      'evil-window-right
        "wL"      'evil-window-move-far-right
        "wr"      'rotate-windows-forward
        "wR"      'rotate-windows-backward
        "ws"      'split-window-vertically
        "wS"      'split-window-vertically-and-focus
        "wt"      'toggle-current-window-dedication
        "wu"      'winner-undo
        "wU"      'winner-redo
        "wv"      'split-window-horizontally
        "wV"      'split-window-horizontally-and-focus))
#+END_SRC

* Settings without corresponding packages
** Base
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :straight nil
    :preface
    (defvar pyrho/indent-width 2) ; change this value to your preferred width
    :config
    (setq frame-title-format '("Yay-Evil") ; Yayyyyy Evil!
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; gt 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width pyrho/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t)

    ;; Relative line numbers
    (global-display-line-numbers-mode 1)
    (setq display-line-numbers-type 'relative))
  #+END_SRC
** Fontaine config
Fontaine is a package to configure different set of fonts. For example, you can have a set of fonts for
coding, another for org mode etc.
#+BEGIN_SRC emacs-lisp
  (use-package fontaine
    :hook
    ;; Persist the latest font preset when closing/starting Emacs.
    ((after-init . fontaine-mode)
     (after-init . (lambda ()
                     ;; Set last preset or fall back to desired style from `fontaine-presets'.
                     (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))))
    :bind (("C-c f" . fontaine-set-preset)
           ("C-c F" . fontaine-toggle-preset))
    :config
    ;; This is defined in Emacs C code: it belongs to font settings.
    (setq x-underline-at-descent-line nil)

    ;; And this is for Emacs28.
                                          ;(setq-default text-scale-remap-header-line t)

    ;; This is the default value.  Just including it here for
    ;; completeness.
    (setq fontaine-latest-state-file (locate-user-emacs-file "fontaine-latest-state.eld"))

    ;; The font family is my design: <https://github.com/protesilaos/aporetic>.
    (setq fontaine-presets
          '((small
             :default-height 80)
            (regular) ; like this it uses all the fallback values and is named `regular'
            (medium
             :default-height 115)
            (large
             :default-height 150)
            (presentation
             :default-height 180)
            (jumbo
             :inherit medium
             :default-height 260)
            (t
             ;; I keep all properties for didactic purposes, but most can be
             ;; omitted.  See the fontaine manual for the technicalities:
             ;; <https://protesilaos.com/emacs/fontaine>.
             :default-family "Aporetic Serif Mono"
             :default-weight regular
             :default-slant normal
             :default-width normal
             :default-height 100

             :fixed-pitch-family "Aporetic Serif Mono"
             :fixed-pitch-weight nil
             :fixed-pitch-slant nil
             :fixed-pitch-width nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-slant nil
             :fixed-pitch-serif-width nil
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Aporetic Sans"
             :variable-pitch-weight nil
             :variable-pitch-slant nil
             :variable-pitch-width nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil
             :mode-line-active-weight nil
             :mode-line-active-slant nil
             :mode-line-active-width nil
             :mode-line-active-height 1.0

             :mode-line-inactive-family nil
             :mode-line-inactive-weight nil
             :mode-line-inactive-slant nil
             :mode-line-inactive-width nil
             :mode-line-inactive-height 1.0

             :header-line-family nil
             :header-line-weight nil
             :header-line-slant nil
             :header-line-width nil
             :header-line-height 1.0

             :line-number-family nil
             :line-number-weight nil
             :line-number-slant nil
             :line-number-width nil
             :line-number-height 1.0

             :tab-bar-family nil
             :tab-bar-weight nil
             :tab-bar-slant nil
             :tab-bar-width nil
             :tab-bar-height 1.0

             :tab-line-family nil
             :tab-line-weight nil
             :tab-line-slant nil
             :tab-line-width nil
             :tab-line-height 1.0

             :bold-family nil
             :bold-slant nil
             :bold-weight bold
             :bold-width nil
             :bold-height 1.0

             :italic-family nil
             :italic-weight nil
             :italic-slant italic
             :italic-width nil
             :italic-height 1.0

             :line-spacing nil))))
#+END_SRC
* Org Mode
** Basic config
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
                                                              h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))
    :config
    (setq org-M-RET-may-split-line nil)

    ;; Hide *~_/ characeters (like conceal).
    ;; To show them, enter (visible-mode).
    (setq org-hide-emphasis-markers t)

    ;; Replace list bullets
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))


  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC
** Font Customization for org-mode
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :straight nil
    :config
    (with-eval-after-load 'org
      (custom-set-faces
       '(org-document-title ((t (:family "Aporetic Sans" :height 300)))))

      (let ((base-size 250))
        (dotimes (i 8)
          (let ((level-face (intern (format "org-level-%d" (1+ i))))
                (size (- base-size (* i 10))))
            (set-face-attribute level-face nil
                                :family "Aporetic Sans"
                                :height size))))))
#+END_SRC
** Org Roam
*** Basic setup
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :straight (org-roam
               :type git
               :host github
               :repo "org-roam/org-roam")
    :custom
    (org-roam-directory "~/org/roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
                                          ;(setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    ;; (setq org-roam-capture-templates
    ;;         '(("d" "default" plain "%?"
    ;;            :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
    ;;                               ":PROPERTIES:
    ;; :ID:       %<%Y-%m-%d>-${slug}
    ;; :END:
    ;; #+title: ${title}
    ;; #+UPDATED_AT: %<%Y-%m-%d %H:%M:%S>

    ;; ")
    ;;            :unnarrowed t)))
    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
#+END_SRC
*** Roam Consult
#+BEGIN_SRC emacs-lisp
  (use-package consult-org-roam
    :after org-roam
    :init
    (require 'consult-org-roam)
    ;; Activate the minor mode
    (consult-org-roam-mode 1)
    :custom
    ;; Use `ripgrep' for searching with `consult-org-roam-search'
    (consult-org-roam-grep-func #'consult-ripgrep)
    ;; Configure a custom narrow key for `consult-buffer'
    (consult-org-roam-buffer-narrow-key ?r)
    ;; Display org-roam buffers right after non-org-roam buffers
    ;; in consult-buffer (and not down at the bottom)
    (consult-org-roam-buffer-after-buffers t)
    :config
    ;; Eventually suppress previewing for certain functions
    (consult-customize
     consult-org-roam-forward-links
     :preview-key "M-.")
    :bind
    ;; Define some convenient keybindings as an addition
    ("C-c n e" . consult-org-roam-file-find)
    ("C-c n b" . consult-org-roam-backlinks)
    ("C-c n B" . consult-org-roam-backlinks-recursive)
    ("C-c n l" . consult-org-roam-forward-links)
    ("C-c n r" . consult-org-roam-search))
#+END_SRC
** Git auto commit
#+BEGIN_SRC emacs-lisp
  (use-package git-auto-commit-mode
    :config
    (setq gac-silent-message-p t))
#+END_SRC
** Org Tempo
#+BEGIN_SRC emacs-lisp
  (use-package org-tempo
    :straight nil
    :after org)
#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we
might as well try to organize under the same syntax as much as
possible to keep the configuration consistent. The option
~use-package-always-ensure~ is turned on in ~init.el~, so we'll add
~:straight nil~ when configuring the built-in packages.
#+END_SRC
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :straight nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :straight nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :straight nil
    :config (column-number-mode +1))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :straight nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :straight nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :straight nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default)
to the more standard K&R. Here we also set the indentation width of C,
C++, Java, and Python to the preferred value defined in
~pyrho/indent-width~ (all languages default to 4, except JavaScript,
                      which is 2, as controlled in ~web-mode~). Of course, you can change
the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :straight nil
    :config
    (setq-default c-basic-offset pyrho/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; Python (both v2 and v3)
  (use-package python
    :straight nil
    :config (setq python-indent-offset pyrho/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :straight nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :straight nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximize the frame by default on start-up. Set the Font to size 12.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :preface
    (defun ian/set-default-font ()
      (interactive)
      (when (member "Aporetic Serif Mono" (font-family-list))
        (set-face-attribute 'default nil :family "Aporetic Serif Mono"))
      (set-face-attribute 'default nil
                          :height 180
                          :weight 'normal))
    :straight nil
    :config
    (setq initial-frame-alist '((fullscreen . maximized)))
    (ian/set-default-font))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :straight nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.

I'm disabling this because parinfer states that it may disrupt it.

#+BEGIN_SRC emacs-lisp
  ;; (use-package elec-pair
  ;;   :straight nil
  ;;   :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :straight nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Treesit
#+BEGIN_SRC emacs-lisp
  (use-package treesit
    :straight nil
    :mode (("\\.tsx\\'" . tsx-ts-mode)
           ("\\.js\\'"  . typescript-ts-mode)
           ("\\.mjs\\'" . typescript-ts-mode)
           ("\\.mts\\'" . typescript-ts-mode)
           ("\\.cjs\\'" . typescript-ts-mode)
           ("\\.ts\\'"  . typescript-ts-mode)
           ("\\.jsx\\'" . tsx-ts-mode)
           ("\\.json\\'" .  json-ts-mode)
           ("\\.Dockerfile\\'" . dockerfile-ts-mode)
           ("\\.prisma\\'" . prisma-ts-mode))
           ;; More modes defined here...

    :preface
    (defun os/setup-install-grammars ()
      "Install Tree-sitter grammars if they are absent."
      (interactive)
      (dolist (grammar
               '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
                 (bash "https://github.com/tree-sitter/tree-sitter-bash")
                 (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
                 (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.21.2" "src"))
                 (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
                 (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
                 (go "https://github.com/tree-sitter/tree-sitter-go" "v0.20.0")
                 (markdown "https://github.com/ikatyang/tree-sitter-markdown")
                 (make "https://github.com/alemuller/tree-sitter-make")
                 (elisp "https://github.com/Wilfred/tree-sitter-elisp")
                 (cmake "https://github.com/uyha/tree-sitter-cmake")
                 (c "https://github.com/tree-sitter/tree-sitter-c")
                 (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
                 (toml "https://github.com/tree-sitter/tree-sitter-toml")
                 (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
                 (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
                 (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))
                 (prisma "https://github.com/victorhqc/tree-sitter-prisma")))
        (add-to-list 'treesit-language-source-alist grammar)
        ;; Only install `grammar' if we don't already have it
        ;; installed. However, if you want to *update* a grammar then
        ;; this obviously prevents that from happening.
        (unless (treesit-language-available-p (car grammar))
          (treesit-install-language-grammar (car grammar)))))

    ;; Optional, but recommended. Tree-sitter enabled major modes are
    ;; distinct from their ordinary counterparts.
    ;;
    ;; You can remap major modes with `major-mode-remap-alist'. Note
    ;; that this does *not* extend to hooks! Make sure you migrate them
    ;; also
    (dolist (mapping
             '((python-mode . python-ts-mode)
               (css-mode . css-ts-mode)
               (typescript-mode . typescript-ts-mode)
               (js-mode . typescript-ts-mode)
               (js2-mode . typescript-ts-mode)
               (c-mode . c-ts-mode)
               (c++-mode . c++-ts-mode)
               (c-or-c++-mode . c-or-c++-ts-mode)
               (bash-mode . bash-ts-mode)
               (css-mode . css-ts-mode)
               (json-mode . json-ts-mode)
               (js-json-mode . json-ts-mode)
               (sh-mode . bash-ts-mode)
               (sh-base-mode . bash-ts-mode)))
      (add-to-list 'major-mode-remap-alist mapping))
    :config
    (os/setup-install-grammars))
#+END_SRC
** Typescript mode
#+BEGIN_SRC emacs-lisp
  (use-package typescript-ts-mode
    :mode (("\\.ts\\'" . typescript-ts-mode)
           ("\\.tsx\\'" . tsx-ts-mode))
    :hook (typescript-ts-base-mode . (lambda ()
                                       (setq js-indent-level 2)
                                       (electric-pair-local-mode)
                                       (lsp-deferred)
                                       (lsp-lens-mode)
                                       (dolist (h '(lsp-format-buffer
                                                    lsp-organize-imports))
                                         (add-hook 'before-save-hook h nil t))))
    :config
    (pyrho/despot-def typescript-ts-mode-map
      "r" 'lsp-find-references))
#+END_SRC
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :straight nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
  #+END_SRC
* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely
fine! However, one of the goals of the Yay-Evil distro is to provide
an essential-only foundation for users to build upon. Therefore, only
the most important packages and/or lightweight improvements will be
included here. For example, completion frameworks like Ivy or Helm are
considered heavy by many, yet the built-in Ido serves almost the same
purpose. The only arguably opinionated package is probably Evil, but
you probably saw that coming from the distro name, didn't you ;) ? If
you prefer the default keybindings, simply disable the section that
controls the Evil behaviors.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Doom themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; Let auto-dark load the themes
                                          ;(load-theme 'doom-nova t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs user s
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
*** Zen Mode / Writeroom
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :ensure t
    :config (setq writeroom-fullscreen-effect 'maximized)
    :hook (writeroom-mode . (lambda ()
                              (display-line-numbers-mode
                               (if writeroom-mode -1 1)))))
#+END_SRC
*** Auto Dark
Switch between themes depending on system
#+begin_src emacs-lisp
  (use-package auto-dark
    :init
    (setq custom-safe-themes t)
    :custom
    (auto-dark-themes '((doom-one) (doom-one-light)))
    (auto-dark-polling-interval-seconds 5)
    (auto-dark-allow-osascript nil)
    (auto-dark-allow-powershell nil)
    ;; (auto-dark-detection-method nil) ;; dangerous to be set manually
    ;; :hook
    ;; (auto-dark-dark-mode
    ;;  . (lambda ()))
    ;;       ;; something to execute when dark mode is detected

    ;; (auto-dark-light-mode
    ;;  . (lambda ()))
    ;;       ;; something to execute when light mode is detected

    :init (auto-dark-mode))

#+end_src
*** Beacon
#+begin_src emacs-lisp
  (use-package beacon-mode
    :straight (beacon-mode :type git :host github :repo "Malabarba/beacon"))

#+end_src
** Motion
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight (avy :type git :host github :repo "abo-abo/avy")
    :after general)
#+END_SRC

*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Yay Evil!"
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC
*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of
editing text (especially code). I also changed the default ~:q~ and
~:wq~ to be killing current buffer, instead of killing the frame or
subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-shift-width pyrho/indent-width)
    :hook (after-init . evil-mode)
    :preface
    (defun ian/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer)
    (evil-set-undo-system 'undo-redo)
    (evil-set-initial-state 'dirvish-mode 'emacs))
#+END_SRC

Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC

Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC

Surround goodness
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC
** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC
** Searching/sorting enhancements & project management
*** Vertico, consult and marginalia
#+BEGIN_SRC emacs-lisp
  ;; Enable Vertico.
  (use-package vertico
    :straight t
    :custom
    (vertico-scroll-margin 0) ;; Different scroll margin
    (vertico-count 20) ;; Show more candidates
    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode)
    (recentf-mode 1))

  ;; Emacs minibuffer configurations.
  (use-package emacs
    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;;(orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;;(orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :straight nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

            ;;;; Code Completion
            ;;;; Code Completion
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)                  ; Enable auto completion
    (corfu-auto-prefix 2)           ; Minimum length of prefix for completion
    (corfu-auto-delay 0)            ; No delay for completion
    (corfu-popupinfo-delay '(0.5 . 0.2))  ; Automatically update info popup after that numver of seconds
    (corfu-preview-current 'insert) ; insert previewed candidate
    (corfu-preselect 'prompt)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-SPC"      . corfu-insert-separator)
                ("TAB"        . corfu-next)
                ([tab]        . corfu-next)
                ("S-TAB"      . corfu-previous)
                ([backtab]    . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET"        . corfu-insert))

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode) ; Popup completion info
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))
              nil
              t))

  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; TAB cycle if there are only few candidates
    (completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function.
    ;; Try `cape-dict' as an alternative.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))

  (use-package marginalia
    :config
    (marginalia-mode 1))

  (use-package consult
    :config
    ;; Define the custom source for org files
    (defvar consult--source-org-files
      `(:name "Org Files"
              :narrow ?o
              :category file
              :face consult-file
              :history file-name-history
              :action ,(lambda (file)
                         (find-file (expand-file-name file "~/org/")))
              :items ,(lambda ()
                        (mapcar (lambda (file)
                                  (file-relative-name file "~/org/"))
                                (seq-filter (lambda (file)
                                              (not (string-match-p "/roam/" file)))
                                            (directory-files-recursively "~/org/" "\\.org$")))))
      "Custom consult source for org files in ~/org directory.")

    ;; Add the source to consult-buffer-sources
    (add-to-list 'consult-buffer-sources 'consult--source-org-files 'append))

  (use-package embark
    :bind (("C-." . embark-act)
           :map minibuffer-local-map
           ("C-c C-c" . embark-collect)
           ("C-c C-e" . embark-export)))

  ;; The `embark-consult' package is glue code to tie together `embark'
  ;; and `consult'.
  (use-package embark-consult)

  ;; The `wgrep' packages lets us edit the results of a grep search
  ;; while inside a `grep-mode' buffer.  All we need is to toggle the
  ;; editable mode, make the changes, and then type C-c C-c to confirm
  ;; or C-c C-k to abort.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852
  (use-package wgrep
    :bind ( :map grep-mode-map
            ("e" . wgrep-change-to-wgrep-mode)
            ("C-x C-q" . wgrep-change-to-wgrep-mode)
            ("C-c C-c" . wgrep-finish-edit)))
#+END_SRC
** Programming language support and utilities
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode)
    :bind (:map flycheck-mode-map
                ("M-n" . flycheck-next-error) ; optional but recommended error navigation
                ("M-p" . flycheck-previous-error)))
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :diminish "LSP"
    :hook ((lsp-mode . lsp-diagnostics-mode)
           (lsp-mode . lsp-enable-which-key-integration)
           ((tsx-ts-mode
             typescript-ts-mode
             js-ts-mode) . lsp-deferred))
    :custom
    (lsp-keymap-prefix "C-c l")           ; Prefix for LSP actions
    (lsp-completion-provider :none)       ; Using Corfu as the provider
    (lsp-diagnostics-provider :flycheck)
    (lsp-session-file (locate-user-emacs-file ".lsp-session"))
    (lsp-log-io nil)                      ; IMPORTANT! Use only for debugging! Drastically affects performance
    (lsp-keep-workspace-alive nil)        ; Close LSP server if all project buffers are closed
    (lsp-idle-delay 0.5)                  ; Debounce timer for `after-change-function'
    ;; core
    (lsp-enable-xref t)                   ; Use xref to find references
    (lsp-auto-configure t)                ; Used to decide between current active servers
    (lsp-eldoc-enable-hover t)            ; Display signature information in the echo area
    (lsp-enable-dap-auto-configure t)     ; Debug support
    (lsp-enable-file-watchers nil)
    (lsp-enable-folding nil)              ; I disable folding since I use origami
    (lsp-enable-imenu t)
    (lsp-enable-indentation nil)          ; I use prettier
    (lsp-enable-links nil)                ; No need since we have `browse-url'
    (lsp-enable-on-type-formatting nil)   ; Prettier handles this
    (lsp-enable-suggest-server-download t) ; Useful prompt to download LSP providers
    (lsp-enable-symbol-highlighting t)     ; Shows usages of symbol at point in the current buffer
    (lsp-enable-text-document-color nil)   ; This is Treesitter's job

    (lsp-ui-sideline-show-hover nil)      ; Sideline used only for diagnostics
    (lsp-ui-sideline-diagnostic-max-lines 20) ; 20 lines since typescript errors can be quite big
    ;; completion
    (lsp-completion-enable t)
    (lsp-completion-enable-additional-text-edit t) ; Ex: auto-insert an import for a completion candidate
    (lsp-enable-snippet t)                         ; Important to provide full JSX completion
    (lsp-completion-show-kind t)                   ; Optional
    ;; headerline
    (lsp-headerline-breadcrumb-enable t)  ; Optional, I like the breadcrumbs
    (lsp-headerline-breadcrumb-enable-diagnostics nil) ; Don't make them red, too noisy
    (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
    (lsp-headerline-breadcrumb-icons-enable nil)
    ;; modeline
    (lsp-modeline-code-actions-enable nil) ; Modeline should be relatively clean
    (lsp-modeline-diagnostics-enable nil)  ; Already supported through `flycheck'
    (lsp-modeline-workspace-status-enable nil) ; Modeline displays "LSP" when lsp-mode is enabled
    (lsp-signature-doc-lines 1)                ; Don't raise the echo area. It's distracting
    (lsp-ui-doc-use-childframe t)              ; Show docs for symbol at point
    (lsp-eldoc-render-all nil)            ; This would be very useful if it would respect `lsp-signature-doc-lines', currently it's distracting
    ;; lens
    (lsp-lens-enable t)                 ; Optional, I don't need it
    ;; semantic
    (lsp-semantic-tokens-enable nil)      ; Related to highlighting, and we defer to treesitter

    :init
    (setq lsp-use-plists t))

  (use-package lsp-completion
    :straight nil
    :no-require
    :hook ((lsp-mode . lsp-completion-mode)))

  (use-package lsp-ui
    :commands
    (lsp-ui-doc-show
     lsp-ui-doc-glance)
    :bind (:map lsp-mode-map
                ("C-c C-d" . 'lsp-ui-doc-glance))
    :after (lsp-mode evil)
    :config (setq lsp-ui-doc-enable t
                  evil-lookup-func #'lsp-ui-doc-glance ; Makes K in evil-mode toggle the doc for symbol at point
                  lsp-ui-doc-show-with-cursor nil      ; Don't show doc when cursor is over symbol - too distracting
                  lsp-ui-doc-include-signature t       ; Show signature
                  lsp-ui-doc-position 'at-point))

#+END_SRC
*** Parinfer
A very useful mode to automatically handle parenthesis for lisp.
The parens are balanced based on indentation.
#+begin_src emacs-lisp
  (use-package parinfer-rust-mode
    :init
    (setq parinfer-rust-auto-download t)
    :hook (emacs-lisp-mode . parinfer-rust-mode))
#+end_src
*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook emacs-lisp-mode)
#+end_src
*** Useful major modes
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC

** AI
*** GPTel
#+begin_src emacs-lisp
  (use-package gptel
    :general ("C-c g" 'gptel)
    :config
    (gptel-make-preset 'gpt4coding                       ;preset name, a symbol
      :description "A preset optimized for coding tasks" ;for your reference
      :backend "Claude"                     ;gptel backend or backend name
      :model 'claude-sonnet-4-20250514
      :system "You are an expert coding assistant. Your role is to provide high-quality code solutions, refactorings, and explanations."
      :tools '("read_buffer" "modify_buffer")) ;gptel tools or tool names
    (setq
     gptel-model 'claude-sonnet-4-20250514
     gptel-backend (gptel-make-anthropic "Claude"
                     :stream t :key (pyrho/get-1password-secret
                                     "op://Personal/Anthropic/credential")))
    ;; Setup MCP
    (require 'gptel-integrations))
#+end_src

*** MCP.el
#+begin_src emacs-lisp
  (use-package mcp
    :after gptel
    :custom (mcp-hub-servers
             `(
               ("filesystem" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem" "~/code/")))
               ("fetch" . (:command "uvx" :args ("mcp-server-fetch")))
               ("server-postgres" . (:command "npx" :args ("-y"
                                                           "@modelcontextprotocol/server-postgres"
                                                           "postgresql://postgres:postgres@127.0.0.1:5433/reel")))))


    :config (require 'mcp-hub)
    :hook (after-init . mcp-hub-start-all-server))

#+end_src

** Docker

*** Docker
A tool to manage docker containers.
#+begin_src emacs-lisp
  (use-package docker
   :general ("C-c d" 'docker))
#+end_src

*** Docker compose mode
#+begin_src emacs-lisp
  (use-package docker-compose-mode)
#+end_src

** vTerm
#+begin_quote
Given that eshell, shell, and (ansi-)term are Emacs built-in, why should I use vterm?
The short answer is: unparalleled performance and compatibility with standard command-line tools.
#+end_quote
https://github.com/akermu/emacs-libvterm#given-that-eshell-shell-and-ansi-term-are-emacs-built-in-why-should-i-use-vterm

#+begin_src emacs-lisp
  (use-package vterm
    :hook (vterm-mode . (lambda() (display-line-numbers-mode -1))))
#+end_src

** Dirvish (Dired replacement)
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :config
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group")
    ;; this command is useful when you want to close the window of `dirvish-side'
    ;; automatically when opening a file
    (put 'dired-find-alternate-file 'disabled nil))

  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("d" "~/Downloads/"                "Downloads")
       ("c" "~/code"                       "Code")
       ("s" "/ssh:olympus.lan:/etc"      "SSH server"))
     :config
     (dirvish-peek-mode)             ; Preview files in minibuffer
    ;; (dirvish-side-follow-mode)      ; similar to `treemacs-follow-mode'
     (setq dirvish-mode-line-format
           '(:left (sort symlink) :right (omit yank index)))
     (setq dirvish-attributes           ; The order *MATTERS* for some attributes
           '(vc-state subtree-state nerd-icons collapse git-msg file-time file-size)
           dirvish-side-attributes
           '(vc-state nerd-icons collapse file-size))
    ;; open large directory (over 20000 files) asynchronously with `fd' command
     (setq dirvish-large-directory-threshold 20000)
     :general
     (pyrho/tyrant-def "dd" 'dirvish-dwim)))
     ;; :bind ; Bind `dirvish-fd|dirvish-side|dirvish-dwim' as you see fit
     ;; (("C-c f" . dirvish)
     ;;  :map dirvish-mode-map               ; Dirvish inherits `dired-mode-map'
     ;;  (";"   . dired-up-directory)        ; So you can adjust `dired' bindings here
     ;;  ("?"   . dirvish-dispatch)          ; [?] a helpful cheatsheet
     ;;  ("a"   . dirvish-setup-menu)        ; [a]ttributes settings:`t' toggles mtime, `f' toggles fullframe, etc.
     ;;  ("f"   . dirvish-file-info-menu)    ; [f]ile info
     ;;  ("o"   . dirvish-quick-access)      ; [o]pen `dirvish-quick-access-entries'
     ;;  ("s"   . dirvish-quicksort)         ; [s]ort flie list
     ;;  ("r"   . dirvish-history-jump)      ; [r]ecent visited
     ;;  ("l"   . dirvish-ls-switches-menu)  ; [l]s command flags
     ;;  ("v"   . dirvish-vc-menu)           ; [v]ersion control commands
     ;;  ("*"   . dirvish-mark-menu)
     ;;  ("y"   . dirvish-yank-menu)
     ;;  ("N"   . dirvish-narrow)
     ;;  ("^"   . dirvish-history-last)
     ;;  ("TAB" . dirvish-subtree-toggle)
     ;;  ("M-f" . dirvish-history-go-forward)
     ;;  ("M-b" . dirvish-history-go-backward)
     ;;  ("M-e" . dirvish-emerge-menu))))
#+end_src

** Miscellaneous
*** Undo
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu-session
    :config
    (undo-fu-session-global-mode))
#+END_SRC
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
* Scripts
** Auto-update UPDATED_AT header
This was causing an issue with org-roam! Because roam expects the first line to be the properties...
Disabling it for now.
#+BEGIN_SRC emacs-lisp
  (defun update-org-updated-at ()
    "Update #+UPDATED_AT header in current org file."
    (when (and (eq major-mode 'org-mode)
               (buffer-file-name))
      (save-excursion
        (goto-char (point-min))
        (if (re-search-forward "^#\\+UPDATED_AT:" nil t)
            (progn
              (beginning-of-line)
              (kill-line)
              (insert (format "#+UPDATED_AT: %s" (format-time-string "%Y-%m-%d %H:%M:%S"))))
          ;; If no UPDATED_AT found, add it after other headers
          (goto-char (point-min))
          (while (looking-at "^#\\+")
            (forward-line))
          (insert (format "#+UPDATED_AT: %s\n" (format-time-string "%Y-%m-%d %H:%M:%S")))))))

  ;; (add-hook 'before-save-hook 'update-org-updated-at)
#+END_SRC

#+RESULTS:
| update-org-updated-at | whitespace-cleanup |
